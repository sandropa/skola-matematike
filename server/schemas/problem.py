from pydantic import BaseModel, ConfigDict # <-- Import ConfigDict for Pydantic v2 style
from typing import Optional, List

# Base schema with common fields (used for input and inheritance)
class ProblemBase(BaseModel):
    latex_text: str
    category: str
    comments: Optional[str] = None
    latex_versions: Optional[List[str]] = None
    solution: Optional[str] = None

# Schema for creating a new problem (used in POST request body)
class ProblemCreate(ProblemBase):
    pass # Inherits all fields from ProblemBase

# Schema for updating a problem (used in PUT request body)
# Often the same as Create, but could allow optional fields if needed
class ProblemUpdate(ProblemBase):
    # You could make fields optional here if you want partial updates
    # e.g., latex_text: Optional[str] = None
    pass

# Schema for representing a Problem in API responses (used in GET responses)
class ProblemSchema(ProblemBase):
    id: int # Include the ID generated by the database

    # Pydantic V2 configuration using ConfigDict
    model_config = ConfigDict(
        from_attributes = True # Replaces orm_mode=True
    )

    # --- OR --- (If you are using Pydantic V1) ---
    # class Config:
    #     orm_mode = True
    # --- Choose the one appropriate for your Pydantic version ---